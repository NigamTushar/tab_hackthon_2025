name: Auto-Generate Tech Docs

on:
  pull_request:
    types: [closed]
  workflow_dispatch: # ✅ Manual trigger for already merged PRs

permissions:
  contents: write
  pull-requests: read
  issues: read

jobs:
  generate-docs:
    # ✅ Ensure it runs only when PR is merged
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Extract Jira Issue Key
        id: extract
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual run - please provide ISSUE_KEY as input in dispatch"
            exit 1
          fi

          ISSUE_KEY=$(echo "${{ github.event.pull_request.title }}" \
            | grep -oE '[A-Za-z]+-[0-9]+' \
            | tr '[:lower:]' '[:upper:]')
          
          echo "Extracted Jira Issue Key: $ISSUE_KEY"
          echo "issue_key=$ISSUE_KEY" >> $GITHUB_OUTPUT

      - name: Get Jira Details
        id: jira
        env:
          JIRA_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        run: |
          RESPONSE=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN \
            -X GET "https://tusharnigam88.atlassian.net/rest/api/3/issue/${{ steps.extract.outputs.issue_key }}")

          echo "----- RAW Jira API Response (first 500 chars) -----"
          echo "$RESPONSE" | head -c 500

          DESCRIPTION=$(echo "$RESPONSE" | jq -r '
            def walkContent:
              if type == "array" then
                map(walkContent) | join(" ")
              elif type == "object" then
                if .type == "text" then .text
                elif .content then (.content | walkContent)
                else empty end
              else empty end;
            .fields.description | walkContent
          ' | tr '\n' ' ')

          TITLE=$(echo "$RESPONSE" | jq -r '.fields.summary // "No Title"')
          STATUS=$(echo "$RESPONSE" | jq -r '.fields.status.name // "Unknown"')

          echo "Parsed Jira Title: $TITLE"
          echo "Parsed Jira Status: $STATUS"

          echo "title=$TITLE" >> $GITHUB_OUTPUT
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT
          echo "status=$STATUS" >> $GITHUB_OUTPUT

      - name: Generate Tech Doc with AI
        id: ai
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          DIFF=$(curl -s \
            -H "Accept: application/vnd.github.v3.diff" \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}")

          echo "Generating Tech Doc via Gemini..."

          RESPONSE=$(curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"contents\": [{
                \"parts\": [{
                  \"text\": \"Generate a technical documentation section based on:
                  - Jira Title: ${{ steps.jira.outputs.title }}
                  - Jira Description: ${{ steps.jira.outputs.description }}
                  - Status: ${{ steps.jira.outputs.status }}
                  - PR Diff: $DIFF

                  Provide a well-structured **Markdown** update for README:
                  ## Feature: <Title>
                  ### Jira Details
                  - **Ticket:** ${{ steps.extract.outputs.issue_key }}
                  - **Status:** ${{ steps.jira.outputs.status }}

                  ### Summary
                  - Implementation details and purpose.

                  ### API Changes
                  - List any API modifications.

                  ### Test Cases
                  - Steps QA can follow to test.

                  ### PR Link
                  - GitHub PR reference.\"
                }]
              }]
            }")

          echo "----- RAW AI RESPONSE -----"
          echo "$RESPONSE"

          SUMMARY=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // "No content generated."')
          
          echo "doc<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update README
        run: |
          echo "${{ steps.ai.outputs.doc }}" >> README.md
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "docs: update tech doc for ${{ steps.extract.outputs.issue_key }}"
          git push
