name: AI PR Review Summary

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  summarize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if PR_COMMENT_TOKEN secret is set
        run: |
          if [ -z "${{ secrets.PR_COMMENT_TOKEN }}" ]; then
            echo "PR_COMMENT_TOKEN secret is NOT set."
            exit 1
          else
            echo "PR_COMMENT_TOKEN secret is available."
          fi

      - name: Extract Jira Issue Key
        id: extract
        run: |
          ISSUE_KEY=$(echo "${{ github.event.pull_request.title }}" | grep -oE '[A-Za-z]+-[0-9]+' | tr '[:lower:]' '[:upper:]')
          echo "Extracted Jira Issue Key: $ISSUE_KEY"
          echo "issue_key=$ISSUE_KEY" >> $GITHUB_OUTPUT

      - name: Get Jira Issue Description
        id: jira
        env:
          JIRA_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_EMAIL: ${{ secrets.JIRA_EMAIL }}
        run: |
          echo "Fetching Jira issue description for ${{ steps.extract.outputs.issue_key }}"
          RESPONSE=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN \
            -X GET "https://tusharnigam88.atlassian.net/rest/api/3/issue/${{ steps.extract.outputs.issue_key }}")

          echo "----- RAW Jira API Response (first 1000 chars) -----"
          echo "$RESPONSE" | head -c 1000

          DESCRIPTION=$(echo "$RESPONSE" | jq -r '
            def walkContent:
              .[] | if .content then (.content | walkContent) else .text end;
            .fields.description.content | walkContent
          ' | tr '\n' ' ')

          echo "----- Parsed Jira Description -----"
          echo "$DESCRIPTION"

          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT

      - name: Get Full PR Diff
        id: diff
        env:
          GITHUB_TOKEN: ${{ secrets.PR_COMMENT_TOKEN }}
        run: |
          echo "Fetching full PR diff for PR #${{ github.event.pull_request.number }}"
          curl -s -H "Accept: application/vnd.github.v3.diff" \
               -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" > pr_diff.txt

          echo "----- First 50 lines of Diff -----"
          head -n 50 pr_diff.txt

      - name: Check PR Size
        id: pr_size
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_COMMENT_TOKEN }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            core.setOutput("changed_files", pullRequest.changed_files);

      - name: Generate Semantic AI Review with Jira Context
        id: ai
        if: steps.pr_size.outputs.changed_files <= 100
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Generating semantic AI review with Jira context..."

          DIFF_CONTENT=$(cat pr_diff.txt)
          PR_DIFF=$(echo "$DIFF_CONTENT" | base64 -w 0)
          JIRA_DESCRIPTION="${{ steps.jira.outputs.description }}"

          RESPONSE=$(curl -s -X POST \
            "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"contents\": [{
                \"role\": \"user\",
                \"parts\": [{
                  \"text\": \"You are a **senior Flutter code reviewer** with a deep understanding of software architecture, feature requirements, and quality assurance. Your task is to review a Pull Request using both the **Jira ticket context (with Acceptance Criteria)** and the **base64-encoded Git Diff**. You must: - Focus only on **semantic, functional, or architectural changes**. - **Ignore formatting-only, comments, or non-functional/lint-related changes**. - Clearly map **code changes** to **Jira requirements**, identifying any missing acceptance criteria. - Help QA and Product teams understand what was changed and what needs to be tested. --- :jigsaw: **Inputs**: Jira Ticket Context (with ACs): ``` $JIRA_DESCRIPTION ``` Base64-Encoded Git Diff: ``` $PR_DIFF ``` --- :clipboard: **Your Output Should Include**: 1. :white_check_mark: **Semantic Summary per File or Module** - Briefly summarize functional or architectural changes made in each file or module. - Highlight how the changes align with the Jira ticket context. - Ignore irrelevant changes (e.g., formatting, comments). 2. :pushpin: **Acceptance Criteria (AC) Coverage Check** - Match implementation against Jira ACs. - Mark ACs as :white_check_mark: Fully Implemented, :warning: Partially Implemented, or :x: Missing. - Point out any mismatch or gaps between PR and Jira expectations. 3. :test_tube: **QA Impact Summary** - List all changed classes/modules. - Describe what QA needs to test functionally (UI/backend as applicable). - Mention user flows, edge cases, or regression areas that need attention. 4. :warning: **Potential Side Effects / Affected Modules** - Identify other modules or functionality that might be impacted indirectly. - Be concise and use bullet points. Flag any risky or sensitive changes. Keep the review focused and efficient. Do not include general praise or vague comments. 
          \Your output will guide code reviewers, QA engineers, and product stakeholders."
                }]
              }]
            }")

          echo "----- RAW GEMINI RESPONSE -----"
          echo "$RESPONSE"

          SUMMARY=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // empty')
          if [ -z "$SUMMARY" ]; then
            SUMMARY="⚠️ Gemini returned no content. Possible empty PR or API issue."
          fi
          echo "----- Extracted Summary -----"
          echo "$SUMMARY"

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post AI Review as PR Comment
        uses: actions/github-script@v7
        env:
          REVIEW_SUMMARY: ${{ steps.ai.outputs.summary }}
        with:
          github-token: ${{ secrets.PR_COMMENT_TOKEN }}
          script: |
            const summary = process.env.REVIEW_SUMMARY;
            if (!summary || summary.trim() === "null") {
              core.setFailed("Summary is empty. Skipping PR comment.");
            } else {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "### 🧠 AI Semantic PR Review with Jira Context\n\n" + summary
              });
            }
