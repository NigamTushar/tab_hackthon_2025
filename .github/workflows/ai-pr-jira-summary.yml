name: AI PR Review Summary

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  summarize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PR metadata
        id: metadata
        run: |
          echo "PR_TITLE=$(jq -r .pull_request.title "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV
          echo "PR_BODY=$(jq -r .pull_request.body "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV
          echo "PR_NUMBER=$(jq -r .pull_request.number "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV
          echo "PR_DIFF_URL=$(jq -r .pull_request.diff_url "$GITHUB_EVENT_PATH")" >> $GITHUB_ENV

      - name: Get PR Diff
        id: diff
        run: |
          DIFF=$(curl -s -L "$PR_DIFF_URL")
          BASE64_DIFF=$(echo "$DIFF" | base64 -w 0)
          echo "diff=$BASE64_DIFF" >> $GITHUB_OUTPUT

      - name: Get Jira Ticket Description
        id: jira
        run: |
          TICKET=$(echo "$PR_TITLE" | grep -oE '[A-Z]+-[0-9]+' || echo "UNKNOWN-000")
          RESPONSE=$(curl -s -u $JIRA_EMAIL:$JIRA_TOKEN \
            -H "Accept: application/json" \
            "https://$JIRA_DOMAIN.atlassian.net/rest/api/3/issue/$TICKET")

          DESCRIPTION=$(echo "$RESPONSE" | jq -r '.fields.description.content[0].content[0].text // empty')
          echo "description=$DESCRIPTION" >> $GITHUB_OUTPUT

      - name: Generate Semantic AI Review with Jira Context
        id: ai
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          JIRA_DESCRIPTION: ${{ steps.jira.outputs.description }}
          PR_DIFF: ${{ steps.diff.outputs.diff }}
        run: |
          echo "Generating Tech Doc via Gemini..."

          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "$(jq -n \
              --arg jira "$JIRA_DESCRIPTION" \
              --arg diff "$PR_DIFF" \
              '{
                contents: [{
                  role: "user",
                  parts: [{
                    text: "You are a senior Flutter reviewer. Carefully review the pull request in the context of the **Jira ticket** and its **Acceptance Criteria (AC)**.\n\nüîç Your goals:\n1. ‚úÖ Summarize the **functional or architectural changes** introduced by the PR.\n2. üîÑ Explain **what changed** in the code vs. the original implementation.\n3. ‚úÖ Check if all **Acceptance Criteria from the Jira ticket** are addressed in the PR.\n  - If any AC is **missing**, clearly list what is **not implemented or partially implemented**.\n4. üß™ Provide detailed **manual test cases** a QA or developer can run to validate the changes.\n5. ‚ö†Ô∏è Identify **other modules or features** that could be impacted.\n\nJira Ticket Context:\n\n\($jira)\n\nBase64-encoded PR Diff:\n\n\($diff)"
                  }]
                }]
              }')")

          echo "----- RAW GEMINI RESPONSE -----"
          echo "$RESPONSE"

          SUMMARY=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text // empty')
          if [ -z "$SUMMARY" ]; then
            SUMMARY="‚ö†Ô∏è Gemini returned no content. Possible empty PR or API issue."
          fi

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post AI Review as PR Comment
        uses: actions/github-script@v7
        env:
          REVIEW_SUMMARY: ${{ steps.ai.outputs.summary }}
        with:
          github-token: ${{ secrets.PR_COMMENT_TOKEN }}
          script: |
            const summary = process.env.REVIEW_SUMMARY;
            if (!summary || summary.trim() === "null") {
              core.setFailed("Summary is empty. Skipping PR comment.");
            } else {
              await github.rest.issues.createComment({
                issue_number: context.payload.pull_request.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: "### üß† AI Semantic PR Review with Jira Context\n\n" + summary
              });
            }
