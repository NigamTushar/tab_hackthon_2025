name: AI PR Review Summary

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  summarize:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Check if PR_COMMENT_TOKEN secret is set
        run: |
          if [ -z "${{ secrets.PR_COMMENT_TOKEN }}" ]; then
            echo "PR_COMMENT_TOKEN secret is NOT set."
            exit 1
          else
            echo "PR_COMMENT_TOKEN secret is available."
          fi

      - name: Get Full PR Diff
        id: diff
        env:
          GITHUB_TOKEN: ${{ secrets.PR_COMMENT_TOKEN }}
        run: |
          echo "Fetching full PR diff for PR #${{ github.event.pull_request.number }}"
          curl -s -H "Accept: application/vnd.github.v3.diff" \
               -H "Authorization: token $GITHUB_TOKEN" \
               "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" > pr_diff.txt

          if [ $? -ne 0 ]; then
            echo "Error fetching PR diff."
            exit 1
          fi

          echo "----- First 50 lines for preview -----"
          head -n 50 pr_diff.txt

      - name: Check PR Size
        id: pr_size
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_COMMENT_TOKEN }}
          script: |
            const { data: pullRequest } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            core.setOutput("changed_files", pullRequest.changed_files);

      - name: Generate Class-Wise AI Review
        id: ai
        if: steps.pr_size.outputs.changed_files <= 100
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        run: |
          echo "Generating class-wise AI review..."

          DIFF_CONTENT=$(cat pr_diff.txt)

          # Encode full diff without truncation
          PR_DIFF=$(echo "$DIFF_CONTENT" | base64 -w 0)

          RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$GEMINI_API_KEY" \
            -H "Content-Type: application/json" \
            -d "{
              \"contents\": [{
                \"parts\": [{
                  \"text\": \"You are a senior Flutter reviewer. Decode the base64 diff and:
                  1. Split feedback by each class and file separately.
                  2. For each class, describe:
                     - Purpose
                     - Changes made
                     - Potential issues or risks
                     - Testing notes
                  3. Output in Markdown with headings for each file and class.
                  Base64 diff:\n\n$PR_DIFF\"
                }]
              }]
            }")

          if [ $? -ne 0 ]; then
            echo "Error generating AI review."
            exit 1
          fi

          echo "----- RAW GEMINI RESPONSE -----"
          echo "$RESPONSE"

          SUMMARY=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')
          echo "----- Extracted Summary -----"
          echo "$SUMMARY"

          echo "summary<<EOF" >> $GITHUB_OUTPUT
          echo "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post Class-Wise Review as PR Comment
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_COMMENT_TOKEN }}
          script: |
            const summary = process.env.SUMMARY;
            github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `### ðŸ§  AI PR Review (Class-Wise)\n\n${summary}`
            });
        env:
          SUMMARY: ${{ steps.ai.outputs.summary }}
